snippet %% "# %% cell" bA
# %% $1
$0
endsnippet

snippet #! "env python3" bA
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
$0
endsnippet

snippet doc "docstring" b
# File		: `!p snip.rv = fn`
# Author    : Xingye Zhu <zhuxy.astro@gmail.com>
# Date		: `date +"%Y/%m/%d"`
$0
endsnippet

snippet fdoc "function doc string" bA
"""
${1:TODO}${2:

Parameters
----------
${3:param} : ${4:TODO: type, optional}
	${5:TODO}

${6:Other Parameters
----------------
${7}
}
Returns
-------
${8}}

${9:Examples
--------
${10}
}
"""
${0}
endsnippet

snippet from "from import" bA
from${1: package} import ${0:module}
endsnippet

snippet sift "attr.sift" w
attr.sift(${1:all_data}['$2'], $3, inplace=${4:False})
$0
endsnippet

snippet set "attr.set" w
attr.set(${1:t}['$2'], ${3:left=$4, right=$5})
$0
endsnippet

snippet [ "['']" i
['$1']$0
endsnippet

snippet plts "plt.subplots" wA
fig, ax = plt.subplots(figsize=(${1:6.4}, ${2:4.8}))
$0
endsnippet

snippet pltss "plt.subplots with multi axes" wA
fig, axes = plt.subplots(nrows=${1:1}, ncols=${2:1},
                         figsize=(${3:6.4}, ${4:4.8}))
axes = axes.flatten()
$0
endsnippet

snippet pltf "plt.figure" wA
fig = plt.figure(figsize=(${1:6.4}, ${2:4.8}))
${3:ax = fig.add_subplot(111)}
$0
endsnippet

snippet defi "def __init__" bA
def __init__(self, ${1:args}):
	${0}
endsnippet

snippet lamb "lambda" bA
${1:var} = lambda ${2:vars} : ${0:action}
endsnippet

# snippet . "self." w
# self.
# endsnippet

snippet trye "Try/Except" bA
try:
	${1:${VISUAL}}
except ${2:Exception} as ${3:e}:
	${0:raise $3}
endsnippet

snippet ifmain "if __main__" bA
if __name__ == '__main__':
	${0:main()}
endsnippet

snippet kwg "kwargs.get" bA
${1:var_name} = kwargs.get('$1', ${2:None})
endsnippet

snippet cmp "methods implementing rich comparison"
def __eq__(self, other):
	${1:pass}

def __ne__(self, other):
	${2:pass}

def __lt__(self, other):
	${3:pass}

def __le__(self, other):
	${4:pass}

def __gt__(self, other):
	${5:pass}

def __ge__(self, other):
	${6:pass}

def __cmp__(self, other):
	${7:pass}
endsnippet

snippet numeric "methods for emulating a numeric type" b
def __add__(self, other):
	${1:pass}

def __sub__(self, other):
	${2:pass}

def __mul__(self, other):
	${3:pass}

def __div__(self, other):
	${4:pass}

def __truediv__(self, other):
	${5:pass}

def __floordiv__(self, other):
	${6:pass}

def __mod__(self, other):
	${7:pass}

def __divmod__(self, other):
	${8:pass}

def __pow__(self, other):
	${9:pass}

def __lshift__(self, other):
	${10:pass}

def __rshift__(self, other):
	${11:pass}

def __and__(self, other):
	${12:pass}

def __xor__(self, other):
	${13:pass}

def __or__(self, other):
	${14:pass}

def __neg__(self):
	${15:pass}

def __pos__(self):
	${16:pass}

def __abs__(self):
	${17:pass}

def __invert__(self):
	${18:pass}

def __complex__(self):
	${19:pass}

def __int__(self):
	${20:pass}

def __long__(self):
	${21:pass}

def __float__(self):
	${22:pass}

def __oct__(self):
	${22:pass}

def __hex__(self):
	${23:pass}

def __index__(self):
	${24:pass}

def __coerce__(self, other):
	${25:pass}
endsnippet

snippet lmstar "lmstar" w
'r$\log M_*\ [\mathrm{M_\odot}]$'
endsnippet
snippet lmhalo "lmhalo" w
r'$\log M_\mathrm{h}\ [\mathrm{M_\odot}]$'
endsnippet
snippet lsfr "lsfr" w
r'$\log \rm{SFR\ [\mathrm{M_\odot}\ yr^{-1}]}$'
endsnippet
snippet lssfr "lssfr" w
r'$\log \rm{sSFR\ [yr^{-1}]}$'
endsnippet
snippet lvdisp "lvdisp" w
r'$\log v_\mathrm{disp}\ [\mathrm{km\ s^{-1}}]$'
endsnippet
snippet lra "lra" w
r"$\mathrm{RA}\ [^\circ]$"
endsnippet
snippet ldec "ldec" w
r"$\mathrm{Dec}\ [^\circ]$"
endsnippet
snippet lz "lz" z
r"$z$"
endsnippet
snippet loverden "loverden" w
r'$\log(1+\delta)$'
endsnippet
